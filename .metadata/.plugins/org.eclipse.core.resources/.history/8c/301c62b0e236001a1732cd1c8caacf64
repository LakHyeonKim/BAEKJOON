import java.util.Scanner;

public class Main {
	private static int[][] map;
	private static int[][] dir = {{0,1},{-1,0},{0,-1},{1,0}};

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int r1 = sc.nextInt(), c1 = sc.nextInt(), r2 = sc.nextInt(), c2 = sc.nextInt();
		map = new int[r2-r1+1][c2-c1+1];
		int N = 10001;
		int transR1 = r1 + N/2;
		int transC1 = c1 + N/2;
		int transR2 = r2 + N/2;
		int transC2 = c2 + N/2;
		int total = N * N;
		int step = 1;
		int count = 0;
		int startI = N/2;
		int startJ = N/2;
		if((startI >= transR1 && startI <= transR2) && (startJ >= transC1 && startJ >= transC2)) {
			System.out.println(startI + ", " + startJ);
			map[startI][startJ] = 1;
		}
			
		outer:while(true) {
			if(step % 2 != 0) {
				for(int i = 0; i < 2; i++) {
					for(int j = 0; j < step; j++) {
						startI += dir[i][0];
						startJ += dir[i][1];
						++count;
						if((startI >= transR1 && startI <= transR2) && (startJ >= transC1 && startJ >= transC2))
							map[startI][startJ] = count + 1;
						if(count == total-1) break outer;
					}
				}
			} else {
				for(int i = 2; i < 4; i++) {
					for(int j = 0; j < step; j++) {
						startI += dir[i][0];
						startJ += dir[i][1];
						++count;
						if((startI >= transR1 && startI <= transR2) && (startJ >= transC1 && startJ >= transC2))
							map[startI][startJ] = count + 1;
						if(count == total-1) break outer;
					}
				}
			}
			step++;
		}
		print(transR1,transC1,transR2,transC2);
	}
	private static void print(int r1, int c1, int r2, int c2) {
		
		
		int tab = String.valueOf(map[r1][c1]).length();
		
		for(int i = r1; i <= r2; i++) {
			for(int j = c1; j <= c2; j++) {
				System.out.format("%" + tab + "d ", map[i][j]);
			}
			System.out.println();
		}
	}

}
